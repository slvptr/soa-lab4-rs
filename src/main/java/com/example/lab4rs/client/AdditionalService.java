package com.example.lab4rs.client;

import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;

import javax.xml.namespace.QName;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 4.0.3
 * 2024-02-17T02:41:24.360+03:00
 * Generated source version: 4.0.3
 *
 */
@WebServiceClient(name = "AdditionalService",
                  wsdlLocation = "file:/home/callmepedro/Documents/labs/soa/lab4-ws/src/main/java/client/service.wsdl",
                  targetNamespace = "http://service.lab4ws.soa.com/")
public class AdditionalService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://service.lab4ws.soa.com/", "AdditionalService");
    public final static QName AdditionalPort = new QName("http://service.lab4ws.soa.com/", "AdditionalPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/callmepedro/Documents/labs/soa/lab4-ws/src/main/java/client/service.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(AdditionalService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/home/callmepedro/Documents/labs/soa/lab4-ws/src/main/java/client/service.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public AdditionalService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AdditionalService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AdditionalService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public AdditionalService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public AdditionalService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public AdditionalService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns AdditionalWSI
     */
    @WebEndpoint(name = "AdditionalPort")
    public AdditionalWSI getAdditionalPort() {
        return super.getPort(AdditionalPort, AdditionalWSI.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AdditionalWSI
     */
    @WebEndpoint(name = "AdditionalPort")
    public AdditionalWSI getAdditionalPort(WebServiceFeature... features) {
        return super.getPort(AdditionalPort, AdditionalWSI.class, features);
    }

}
